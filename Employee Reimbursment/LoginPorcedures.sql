CREATE OR REPLACE FUNCTION GET_EMPLOYEE_HASH(USERNAME VARCHAR2, PASSWORD VARCHAR2) RETURN VARCHAR2
IS
EXTRA VARCHAR2(10) := 'SALT';
BEGIN
  RETURN TO_CHAR(DBMS_OBFUSCATION_TOOLKIT.MD5(
  INPUT => UTL_I18N.STRING_TO_RAW(DATA => USERNAME || PASSWORD || EXTRA)));
END;
/

CREATE OR REPLACE TRIGGER EMPLOYEE_INSERT_TRIG
BEFORE INSERT
ON EMPLOYEES
FOR EACH ROW
BEGIN
  /* INCREASE THE SEQUENCE */
  IF :NEW.EMPID IS NULL THEN
    SELECT EMPID_SEQ.NEXTVAL INTO :NEW.EMPID FROM DUAL;
  END IF;
  
  /* SAVE HASH INSTEAD OF PASSWORD */
  SELECT GET_EMPLOYEE_HASH(:NEW.USERNAME,:NEW.PW) INTO :NEW.PW FROM DUAL;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE(
    EMPLOYEENAME    VARCHAR2, 
    EMAIL           VARCHAR2, 
    USERNAME        VARCHAR2, 
    PW              VARCHAR2,
    TITLETYPE       VARCHAR2,
    ISMANAGER       NUMBER)
AS
BEGIN
  INSERT INTO EMPLOYEES VALUES(NULL, EMPLOYEENAME, EMAIL, USERNAME, PW, TITLETYPE, ISMANAGER);
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(
    U_EMPID           NUMBER,
    U_EMPLOYEENAME    VARCHAR2, 
    U_EMAIL           VARCHAR2, 
    U_USERNAME        VARCHAR2, 
    U_PW              VARCHAR2)
AS
    NEW_PW  VARCHAR2(100);
BEGIN
    SELECT GET_EMPLOYEE_HASH(U_USERNAME, U_PW) INTO NEW_PW FROM DUAL;
    UPDATE EMPLOYEES
    SET EMPLOYEENAME=U_EMPLOYEENAME, EMAIL=U_EMAIL, USERNAME=U_USERNAME, PW=NEW_PW
    WHERE EMPID=U_EMPID;
    COMMIT;
END;
/
